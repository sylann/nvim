snippet make
	make(${1:[]string}, ${2:0})$0

snippet map
	map[${1:string}]${2:int}$0

snippet if
	if ${1:condition} {
		${0:// do}
	}$0

snippet ifelse
	if ${1:condition} {
		${2:// do}
	} else {
		${3:// do}
	}$0

snippet iferr
	if ${1:err} != nil {
		return ${1:err}
	}$0

snippet iferrfmt
	if ${1:err} != nil {
		return fmt.Errorf("${2:context message}: %w", $1)
	}$0

snippet forn
	for ${1:i} := 0; $1 < ${2:n}; $1++ {
		${3:// do}
	}$0

snippet forsize
	for ${1:i}, ${2:size} := ${3:0}, len(${4:slice}); $1 < $2; $1++ {
		${5:// do}
	}$0

snippet forof
	for ${1:i}, ${2:val} := range ${3:slice} {
		${0:// do}
	}$0

snippet forin
	for ${1:k}, ${2:val} := range ${3:mapping} {
		${4:// do}
	}$0

snippet switch
	switch ${1:variable} {
	case ${2:value}:
		${3:// do}
	default:
		${4:// do}
	}$0

snippet select
	select {
	case ${1:value} := <-${2:channel}
		${3:// do}
	default:
		${4:// do}
	}$0

snippet struct
	type ${1:name} struct {
		${2:field string}
	}$0

snippet interface
	type ${1:name} interface {
		${2:Method()}
	}$0

snippet func
	func ${1:name}(${2:arg})${3: string} {
		${3:return ""}
	}$0

snippet funcreceiver
	func (${1:receiver}) ${2:name}(${3:arg})${4: string} {
		${5:return ""}
	}$0

snippet funcrequest
	func (${1:receiver}) ${2:name}(w http.ResponseWriter, r *http.Request) {
		${3:// body}
	}$0

snippet printf
	fmt.Printf("%${1:v}\n", ${2:variable})$0

snippet printl
	fmt.Println(${1:variable})$0

snippet printfs
	fmt.Sprintf("%${1:v}\n", ${2:variable})$0

snippet printls
	fmt.Sprintln(${1:variable})$0

snippet printff
	fmt.Fprintf(${1:w}, "%${2:v}\n", ${3:variable})$0

snippet printlf
	fmt.Fprintln(${1:w}, ${2:variable})$0

snippet log
	log.Println(${1:variable})$0

snippet logf
	log.Printf("%${2:s}\n", ${1:variable})$0

snippet test
	func Test${1:Name}(t *testing.T) {
		${2:// body}
	}$0

snippet bench
	func Bench${1:Name}(b *testing.B) {
		for i := 0; i < b.N; i++ {
			${2:// body}
		}
	}$0
