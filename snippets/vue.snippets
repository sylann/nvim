snippet vif
	<${2:template} v-if="${1:condition}">
		${3:content}
	</$2>$0

snippet vfor
	<${4:template} v-for="${2:item} in ${1:iterable}" :key="${3:item.id}">
		${5:content}
	</$4>$0

snippet slot
	<slot #${1:name}></slot>

snippet transition
	<transition name="${1:fade}">
		${0:content}
	</transition>

snippet defprops
	const props = defineProps<{
		${1:modelValue}: ${2:string}
	}>()$0

snippet defemits
	const emit = defineEmits<{
		(event: "${1:modelValue}", value: ${2:string}): ${3:void}
		(event: "${4:click}"): ${5:void}
	}>()$0

snippet ref
	const ${1:varname} = ref<${2:type}>(${3:default})$0

snippet reactive
	const ${1:varname} = reactive<${2:type}>({$0})

snippet computed
	const ${1:varname} = computed<${2:type}>(() => {${3:/* do something */}})$0

snippet watch
	watch(${1:ref}, () => {${2:/* do something */}})$0

snippet watchimed
	watch(${1:ref}, () => {${2:/* do something */}}, { immediate: true })$0

snippet vuescript
	<script setup lang="ts">
	  ${1:Script}
	</script>

	<template>
	  ${2:Html}
	</template>

snippet vuetemplate
	<template>
	  ${1:Html}
	</template>

	<script setup lang="ts">
	  ${2:Script}
	</script>

snippet implib
	import ${1:lib} from "$1"$0

snippet impoflib
	import${1: type} { ${3:thing} } from "${2:lib}"$0

snippet impmodule
	import ${1:module} from "@/${2:path/to/}${3:$1}"$0

snippet impofmodule
	import${1: type} { ${4:thing} } from "@/${2:path/to/module}"$0

snippet impcomponent
	import ${1:ComponentName} from "@/components/${2:path/to/}$1.vue"$0

snippet usestore
	const ${2:n}Store = useStore${1:Name}()$0

snippet type
	type ${1:Typename} = {
	  ${2:field}: ${3:string}
	}$0

snippet function
	function ${1:funcName}(${2:args})${3:: string} {
	}$0
