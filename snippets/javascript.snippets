snippet doc
	/**
	 * ${1:Documentation}
	 */

snippet @param
	@param {${1:type}} ${2:varname}${3: description}

snippet @paramopt
	@param {${1:type}} [${2:varname}]${3: description}

snippet @type
	@type {${1:type}}

snippet @returns
	@returns {${1:type}}

snippet func
	function ${1:funcName}(${2:args})${3:: string} {
	  $0
	}

snippet ``
	\`${1:before}\${${2:variable}}${3:after}\`

snippet $
	\${${1:variable}}

snippet log
	console.${1:log|warn|error}("${2:prefix}", ${3:variable})$0

snippet if
	if (${1:condition}) {
	  ${2:// something}
	}$0

snippet else
	else {
	  $0
	}

snippet raise
	throw new Error("${1:message}")

snippet retal
	return window.alert("${1:context}(): ${2:problem}")

snippet retwar
	return console.warn("${1:context}(): ${2:problem}")

snippet switchreturn
	switch (${1:variable}) {
	  case ${2:value}: return ${3:// Do something}
	  default: return ${4:// Do something}
    }

snippet switchbreak
	switch (${1:variable}) {
	  case ${2:value}:
		${3:// Do something}
		break
	  default:
		${4:// Do something}
		break
	}

snippet try
	try {
	  ${1:// try this}
	} catch (ex) {
	  ${1:// or do this}
	}

snippet fori
	for (let ${1:i} = 0, size = ${2:42}; $1 < size; $1++) {
	  $0
	}

snippet forlen
	for (let ${1:i} = 0, size = ${2:array}.length; $1 < size; $1++) {
	  ${3:const item = $2[i]}
	}$0

snippet forof
	for (const ${1:item} of ${2:iterable}) {
	  $0
	}

snippet forin
	for (const ${1:key} of ${2:mapping}) {
	  ${3:const val = $2[key]}
	}$0

snippet wait
	await new Promise((resolve) => setTimeout(resolve, ${1:250}))

